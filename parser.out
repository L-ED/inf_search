Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression OR term
Rule 2     expression -> expression AND term
Rule 3     expression -> term
Rule 4     term -> NOT factor
Rule 5     term -> factor
Rule 6     factor -> WORD
Rule 7     factor -> LPARENT expression RPARENT

Terminals, with rules where they appear

AND                  : 2
LPARENT              : 7
NOT                  : 4
OR                   : 1
RPARENT              : 7
WORD                 : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 7 0
factor               : 4 5
term                 : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression OR term
    (2) expression -> . expression AND term
    (3) expression -> . term
    (4) term -> . NOT factor
    (5) term -> . factor
    (6) factor -> . WORD
    (7) factor -> . LPARENT expression RPARENT

    NOT             shift and go to state 3
    WORD            shift and go to state 5
    LPARENT         shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . OR term
    (2) expression -> expression . AND term

    OR              shift and go to state 7
    AND             shift and go to state 8


state 2

    (3) expression -> term .

    OR              reduce using rule 3 (expression -> term .)
    AND             reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPARENT         reduce using rule 3 (expression -> term .)


state 3

    (4) term -> NOT . factor
    (6) factor -> . WORD
    (7) factor -> . LPARENT expression RPARENT

    WORD            shift and go to state 5
    LPARENT         shift and go to state 6

    factor                         shift and go to state 9

state 4

    (5) term -> factor .

    OR              reduce using rule 5 (term -> factor .)
    AND             reduce using rule 5 (term -> factor .)
    $end            reduce using rule 5 (term -> factor .)
    RPARENT         reduce using rule 5 (term -> factor .)


state 5

    (6) factor -> WORD .

    OR              reduce using rule 6 (factor -> WORD .)
    AND             reduce using rule 6 (factor -> WORD .)
    $end            reduce using rule 6 (factor -> WORD .)
    RPARENT         reduce using rule 6 (factor -> WORD .)


state 6

    (7) factor -> LPARENT . expression RPARENT
    (1) expression -> . expression OR term
    (2) expression -> . expression AND term
    (3) expression -> . term
    (4) term -> . NOT factor
    (5) term -> . factor
    (6) factor -> . WORD
    (7) factor -> . LPARENT expression RPARENT

    NOT             shift and go to state 3
    WORD            shift and go to state 5
    LPARENT         shift and go to state 6

    expression                     shift and go to state 10
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 7

    (1) expression -> expression OR . term
    (4) term -> . NOT factor
    (5) term -> . factor
    (6) factor -> . WORD
    (7) factor -> . LPARENT expression RPARENT

    NOT             shift and go to state 3
    WORD            shift and go to state 5
    LPARENT         shift and go to state 6

    term                           shift and go to state 11
    factor                         shift and go to state 4

state 8

    (2) expression -> expression AND . term
    (4) term -> . NOT factor
    (5) term -> . factor
    (6) factor -> . WORD
    (7) factor -> . LPARENT expression RPARENT

    NOT             shift and go to state 3
    WORD            shift and go to state 5
    LPARENT         shift and go to state 6

    term                           shift and go to state 12
    factor                         shift and go to state 4

state 9

    (4) term -> NOT factor .

    OR              reduce using rule 4 (term -> NOT factor .)
    AND             reduce using rule 4 (term -> NOT factor .)
    $end            reduce using rule 4 (term -> NOT factor .)
    RPARENT         reduce using rule 4 (term -> NOT factor .)


state 10

    (7) factor -> LPARENT expression . RPARENT
    (1) expression -> expression . OR term
    (2) expression -> expression . AND term

    RPARENT         shift and go to state 13
    OR              shift and go to state 7
    AND             shift and go to state 8


state 11

    (1) expression -> expression OR term .

    OR              reduce using rule 1 (expression -> expression OR term .)
    AND             reduce using rule 1 (expression -> expression OR term .)
    $end            reduce using rule 1 (expression -> expression OR term .)
    RPARENT         reduce using rule 1 (expression -> expression OR term .)


state 12

    (2) expression -> expression AND term .

    OR              reduce using rule 2 (expression -> expression AND term .)
    AND             reduce using rule 2 (expression -> expression AND term .)
    $end            reduce using rule 2 (expression -> expression AND term .)
    RPARENT         reduce using rule 2 (expression -> expression AND term .)


state 13

    (7) factor -> LPARENT expression RPARENT .

    OR              reduce using rule 7 (factor -> LPARENT expression RPARENT .)
    AND             reduce using rule 7 (factor -> LPARENT expression RPARENT .)
    $end            reduce using rule 7 (factor -> LPARENT expression RPARENT .)
    RPARENT         reduce using rule 7 (factor -> LPARENT expression RPARENT .)

